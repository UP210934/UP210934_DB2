
USE BD_FLIX;

CREATE TABLE MOVIES ( 
   	TITLE_ID int(10) auto_increment NOT NULL  , 
      TITLE VARCHAR(60) NOT NULL, 
      DESCRIPTION VARCHAR(400) NOT NULL , 
       RATING VARCHAR(4), 
         CATEGORY VARCHAR(20), 
           RELEASE_DATE DATE NOT NULL , 
	-- Se ignora el nombre del constraint por ser primary keu
      CONSTRAINT FLX_MOV_TITLE_ID_PK PRIMARY KEY (TITLE_ID),
      CONSTRAINT FXL_MOV_CHECK_RATING check(
            RATING IN ('G', 'PG', 'PG13', 'R')),
      CONSTRAINT FXL_MOV_CHECK_CATEGORY check(
            CATEGORY IN ('DRAMA', 'COMEDY', 'ACTION', 'CHILD', 
                        'SCIFI', 'DOCUMENTARY'))
);

CREATE TABLE STAR_BILLINGS (
	ACTOR_ID int(10) NOT NULL, 
    TITLE_ID int(10) NOT NULL,
    COMMENTS VARCHAR(40), 
    CONSTRAINT FLX_STBILL_PK PRIMARY KEY (ACTOR_ID,TITLE_ID)
   );
   
CREATE TABLE MEDIA	(
	MEDIA_ID int(10) auto_increment,
	FORMAT VARCHAR(3) NOT NULL ,
	TITLE_ID int(10) NOT NULL ,
	CONSTRAINT FLX_MEDIA_ID_PK PRIMARY KEY (MEDIA_ID)
)AUTO_INCREMENT=92;

CREATE TABLE  ACTORS (
	ACTOR_ID int(10) auto_increment, 
	STAGE_NAME VARCHAR(40) NOT NULL , 
	FIRST_NAME VARCHAR(25) NOT NULL ,
    LAST_NAME VARCHAR(25) NOT NULL ,
    BIRTH_DATE DATE NOT NULL ,
	CONSTRAINT ACTOR_ID_PK PRIMARY KEY (ACTOR_ID)
   )AUTO_INCREMENT=1001;

CREATE TABLE CUSTOMERS(
	CUSTOMER_ID int(10) auto_increment,
	LAST_NAME VARCHAR(25) NOT NULL,
	FIRST_NAME VARCHAR(25) NOT NULL, 
	HOME_PHONE VARCHAR(12) NOT NULL,
	ADDRESS VARCHAR(100) NOT NULL,
	CITY VARCHAR(30) NOT NULL,
	STATE VARCHAR(2) NOT NULL,
	EMAIL VARCHAR(25),
	CELL_PHONE VARCHAR(12),
	CONSTRAINT FLX_CUST_ID_PK PRIMARY KEY (CUSTOMER_ID)
)AUTO_INCREMENT=101;

CREATE TABLE RENTAL_HISTORY(
	MEDIA_ID int(10) auto_increment,
	RENTAL_DATE DATE DEFAULT CURRENT_TIMESTAMP ,
	CUSTOMER_ID int(10) NOT NULL,
	RETURN_DATE DATE,
	CONSTRAINT FLX_RENT_HIST_ID_PK PRIMARY KEY (MEDIA_ID, RENTAL_DATE)
);

-- ###--LLAVES FORANEAS
ALTER TABLE STAR_BILLINGS ADD CONSTRAINT FLX_STBIL_TITLE_ID FOREIGN KEY (TITLE_ID)
    REFERENCES MOVIES (TITLE_ID);
ALTER TABLE STAR_BILLINGS ADD CONSTRAINT FLX_STBIL_ACTOR_ID FOREIGN KEY (ACTOR_ID)
    REFERENCES ACTORS (ACTOR_ID);
ALTER TABLE MEDIA ADD CONSTRAINT FLX_MEDIA_TITLE_ID FOREIGN KEY (TITLE_ID)
	REFERENCES MOVIES (TITLE_ID);
ALTER TABLE RENTAL_HISTORY ADD CONSTRAINT FLX_RENT_HIST_MEDIA_ID_FK FOREIGN KEY (MEDIA_ID)
	REFERENCES MEDIA (MEDIA_ID);
ALTER TABLE RENTAL_HISTORY ADD CONSTRAINT FLX_RENT_HIST_CUST_ID_FK FOREIGN KEY (CUSTOMER_ID)
	REFERENCES CUSTOMERS (CUSTOMER_ID);

-- --INDICES
CREATE INDEX flx_cust_lname_idx
ON CUSTOMERS (LAST_NAME);


-- ###--VIEWS
-- --vista para media y movie
CREATE OR REPLACE VIEW TITLE_UNAVAIL
(MEDIA_ID, MOVIE_TITLE)
AS
SELECT m.media_id, t.title
FROM media m inner join movies t on m.title_id = t.title_id
		inner join rental_history r on m.media_id = r.media_id
WHERE r.return_date > current_timestamp();